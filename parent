// Many Sorting algorithms fused in one program 

#include<stdio.h>
#include<conio.h>
void lsearch(int[],int,int);
void binarys(int[],int,int);
void bubble(int[],int);
void swap(int[],int,int);
void display(int[],int);
void selection(int[],int);
void insertion(int[],int);
//merge sort
void merge(int[],int,int,int);
void part(int[],int,int,int);
//quick sort(in place algorithm) worst-O(n2) best,average -onlogn
void quick(int[],int,int);
int quickpart(int[],int,int); //anotherway of part function of qs
//heapsort
void heapsort(int[],int);
void heapify(int[],int,int);
void buildmaxheap(int[],int);
void main()
{
  clrscr();
  int i,j,total,arr[100],num,input;
  printf("enter number of elements \n");
  scanf("%d",&total);
  printf("enter elements in array \n");
  for(i=0;i<total;i++)
  {
   scanf("%d",&arr[i]);
   }
   printf(" the entered array is \n");
   for(i=0;i<total;i++)
   {
    printf("%d \t",arr[i]);
    }
    printf("enter the number you want to search \n");
    scanf("%d",&num);
   printf("Below are the search algorith available,which search algorithm you want to use? \n");

   printf(" 1 .  Binary Search(Best Sorting algorithm) \n");
   printf(" 2 .  Linear Search(Naive Sorting algorithm)\n");
   scanf("%d",&input);
 switch(input)
 {
  case 1:
printf(" \n Searching element using binary search \n");
binarys(arr,total,num);
break;

 case 2:
printf(" \n Searching element using linear search \n");
lsearch(arr,total,num);
break;

default:
printf(" wrong choice entered \n");
  }
    getch();
}
    void lsearch(int arr2[],int total2,int num2)
 {
    int i;
    int count=0;
     printf("SEARCHING ELEMENTS \n");
     for(i=0;i<total2;i++)

     {
      if(arr2[i]==num2)
      {
	printf(" \n the required number is present at %d \n",i+1);
	count++;
	 }
     }
     if(count==0)
     {
      printf("'the required number is not present in array");
      }
}

void binarys(int arr2[],int total2,int num2)
{
int count=0;
int low=0,high=total2-1;
int mid;
int input;

printf("\n searching element through binary search \n");
// sorting elements

printf(" select the sorting algorithm you want to use \n");
printf(" 1: BUbble Sort \n");
printf(" 2: Selection Sort \n");
printf(" 3: Insertion Sort \n");
printf(" 4: Merge Sort \n");
printf(" 5: Quick Sort \n");
printf(" 6: Heap Sort \n");
scanf("%d",&input);
switch(input)
 {
  case 1:
printf(" \n Sorting element using Bubble Sort \n");
bubble(arr2,total2);
break;


 case 2:
printf(" \n Sorting element using Selection Sort \n");
selection(arr2,total2);
break;


case 3:
printf(" \n Sorting element using Insertion Sort \n");
insertion(arr2,total2);
break;

case 4:
printf(" \n Sorting element using Merge Sort \n");
part(arr2,0,total2-1,total2);
break;

case 5:
printf(" \n Sorting element using Quick Sort \n");
quick(arr2,0,total2-1);
break;

case 6:

printf(" \n Sorting element using Heap Sort \n");
heapsort(arr2,total2);
break;

default:
	    printf("Error! wrong choice entered");

  }

display(arr2,total2);
while(low <= high)
{
 mid=(high+low)/2;
 if(num2==arr2[mid])
  {
   printf("\n the required number is present %d position \n",mid+1);
   count++;
    break;
   }



    else if (num2 < arr2[mid])
      high=mid-1;
       else
	 low=mid+1;
}
int mid1=mid;
while(mid1>=low)
  {

   if(arr2[mid1]==arr2[mid1-1])
    {
    printf("the required number is present at %d position \n",mid1);
    mid1--;
    }
    else
    break;
   }
while(mid1<=high)
{
 if(arr2[mid]==arr2[mid+1])
  {
   printf("the required number is present at %d position \n",mid+2);
   mid++;
   }
   else
   break;
  }

  if(count==0)

printf(" number not found in the array \n");

}


void bubble(int arr2[],int total2)
{
  int i,flag,k;

//optimum solution

for(i=0;i<total2-1;i++)

{ flag=0;
  for(k=0;k<total2-i-1;k++)

   {

     if(arr2[k]>arr2[k+1])
     {swap(arr2,k,k+1);

      flag=1;
     }
    }

  if(flag == 0)
  break;

}
printf("the sorted array is \n");

for(i=0; i<total2;i++)
printf("%d \t",arr2[i]);

}

void selection(int arr[],int total)
{
  //this sorting algorithms will search the array for the minimum         //number and replace it will the number present in the array    //element 0

int i,min,j;

 for(i=0;i<total-1;i++)

  { min=i;
   for(j=i+1;j<total;j++)
   {
    if(arr[j]<arr[min])
    {
     swap(arr,j,i);
     min=j;
    }
   }
  }
  printf("the sorted array is \n");
  for(i=0;i<total;i++)
  printf("%d  ",arr[i]);
}

void insertion(int arr[],int total)

 //this will create a hole everytime you identify a number and
//then you have to shift numbers by 1 which are greater than the identified number by 1 place,starting from 1st index

{
 int hole,i,value;

for(i=1;i<total-1;i++)
{
 value=arr[i];
 hole=i;
 while(hole > 0 && arr[hole-1] >value)
 {
  arr[hole]=arr[hole-1];
  hole--;
}
 arr[hole]=value;
}
printf("the sorted array is \n");
for(i=0;i<total;i++)
printf("%d  ",arr[i]);

}
//this is merge sort,the worst best and average all condition //take only O(nlogn) time,so better than selection insertion and
// bubble sorting algorithms

// below function will divide array into sub list,initially it //will take the array,the high and the low

void part(int arr[],int low,int high,int total)

{
 int mid;
 if(low < high)
 {
 mid=((low+high)/2);
 part(arr,low,mid,total);
 part(arr,mid+1,high,total);
 merge(arr,low,mid,high);
 }
}
 void merge(int arr[],int low,int mid,int high)
{
int a=low; //for the array which will become sorted array
int b=low; // for the temp sub array(left)
int c=mid+1; // for the temp sub array (right)
int arr2[50]; // for the sorted array

while(b<=mid && c<=high)
{

 if(arr[b] <= arr[c])

  arr2[a++]=arr[b++];

  else

   arr2[a++]=arr[c++];
}

while(b<=mid)
{
 arr2[a++]=arr[b++];
}
while( c <= high)
{
 arr2[a++]=arr[c++];
}
for(int i=low;i<=high;i++)
arr[i]=arr2[i];

}

void quick(int arr[],int low,int high)
 {
  if(low<high)
   {
    int pivot;

    pivot=quickpart(arr,low,high);
    quick(arr,low,pivot-1);
    quick(arr,pivot+1,high);
   }
}
int quickpart(int arr[],int low,int high)
{ int pindex,pivot,i;
  pindex=low;
  pivot=arr[high];
 for(i=low;i<high;i++)
{
 if(arr[i] <= pivot)
{
 swap(arr,i,pindex);
pindex++;
}
}
swap(arr,pindex,high);
return pindex;
 }

void heapsort(int arr[],int n)  //we entered here
{
 int i;
 buildmaxheap(arr,n); // we called this to get a max heap for  //the first time so that we are eligible for the first loop run
 for(i=n-1;i>=0;i--)
 {
   swap(arr,0,i);        //we are forever stuck here
                  // until the loop is closed
   heapify(arr,i,0);   // we jump from here to other function
 }
}
void buildmaxheap(int arr[],int n)
{
		  //this function runs once only
for(int i=((n/2)-1);i>=0;i--)
{
 heapify(arr,n,i);
}
 }

void heapify(int arr[],int n,int node)

{
int l=(2*node)+1;
int r=(2*node)+2;

 int max=node;
if(l < n && arr[l] > arr[max])
{
 max =l;
}
if(r < n && arr[r] > arr[max])
  {
   max = r;
  }
 if(max != node)
 {
   swap(arr,node,max);
   heapify(arr,n,max);
 }

}

void swap(int arr2[],int a,int b)
{
int temp;
temp=arr2[a];
arr2[a]=arr2[b];
arr2[b]=temp;
}

void display(int arr[],int total)
{
 int i;
printf("the sorted array is \n");
for(i=0;i<total;i++)
{
 printf("%d  ",arr[i]);
}
}
